{"version":3,"sources":["custom-markmap.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["maxVisibleBranchDepth","child","depth","d","p","f","c","length","childValues","flatMap","Math","max","modifyChildVisibility","node","modifyNode","forEach","CustomMarkmap","this","state","data","depthCutoff","maxLevel","renderData","Markmap","transformer","Transformer","Control","children","onClick","title","className","Controls","markMapRef","svgElementRef","onZoom","multiplier","current","rescale","onCollapse","a","collapseTree","fit","onExpand","expandTree","svgTextWithAttribute","outerHTML","replace","svgFileText","element","document","createElement","setAttribute","btoa","body","appendChild","click","removeChild","Mindmap","value","useEffect","colorFn","duration","color","d3","toString","nodeMinHeight","spacingVertical","spacingHorizontal","paddingX","nodeFont","markMap","root","transform","setData","ref","Sidebar","onChange","textAreaRef","useRef","open","onToggle","e","target","focus","App","valueFromParams","URLSearchParams","location","search","get","decodedValueFromParams","atob","useState","setValue","newValue","searchParams","set","newRelativePathQuery","window","pathname","history","pushState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.06045c2f.chunk.js","sourcesContent":["\nimport { Markmap } from 'markmap-view';\nimport { INode } from 'markmap-common';\n\n// The circle between columns counts as one\n// so we must remove two\nconst ONE_MARKMAP_LEVEL = 2;\n\nfunction maxVisibleBranchDepth(child: INode): number {\n    const depth = child.d || -1;\n    const hiddenChildren = child?.p?.f === true;\n\n    if (!hiddenChildren && child?.c?.length) {\n        const childValues = child.c.flatMap(maxVisibleBranchDepth)\n        return Math.max(...childValues);\n    }\n\n    return depth;\n}\n\nconst markChildrenAsHidden = (depthCutoff: number) => (child: INode) => {\n    if (child.d && child.d >= depthCutoff) {\n        child.p.f = true;\n    }\n};\n\nconst markChildrenAsVisible = (depthCutoff: number) => (child: INode) => {\n    if (child?.d === depthCutoff) {\n        child.p.f = false;\n    }\n};\n\nfunction modifyChildVisibility(node: INode, modifyNode: Function): void {\n    modifyNode(node);\n\n    node.c?.forEach(child => {\n        modifyChildVisibility(child, modifyNode);\n    })\n}\n\nexport class CustomMarkmap extends Markmap {\n    collapseTree() {\n        if (!this.state.data) return;\n\n        const maxLevel = maxVisibleBranchDepth(this.state.data);\n        const modifyNode = markChildrenAsHidden(maxLevel - ONE_MARKMAP_LEVEL);\n        modifyChildVisibility(this.state.data, modifyNode);\n\n        this.renderData();\n    }\n    expandTree() {\n        if (!this.state.data) return;\n\n        const maxLevel = maxVisibleBranchDepth(this.state.data);\n        const modifyNode = markChildrenAsVisible(maxLevel);\n        modifyChildVisibility(this.state.data, modifyNode);\n\n        this.renderData();\n    }\n}\n","import React, { useState, useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport { INode } from 'markmap-common';\nimport { Transformer } from 'markmap-lib';\nimport { CustomMarkmap } from './custom-markmap';\nimport './App.css';\n\nconst transformer = new Transformer();\nconst initValue = `# Title\n\n- one\n- two\n- third item\n  - fourth item\n    second line\n  - five\n    - six\n\n`;\n\nfunction Control({ children, onClick, title }: { children: React.ReactChild | React.ReactChild[], onClick: any, title?: string }) {\n  return <button title={title} onClick={onClick} className=\"controls__button\">{children}</button>\n}\n\nfunction Controls({ markMapRef, svgElementRef }: { markMapRef: React.MutableRefObject<CustomMarkmap | null>, svgElementRef: React.MutableRefObject<SVGSVGElement | null> }) {\n\n  const onZoom = (multiplier: number) => () => {\n    if (markMapRef.current) {\n      markMapRef.current.rescale(1 * multiplier)\n    }\n  }\n\n  const exportClick = () => {\n    // TODO: Need to somehow zoom in before capturing - should this be done in an invisible copy?\n    const svgText = svgElementRef?.current?.outerHTML || \"\";\n    const svgTextWithAttribute = svgText.replace('<svg ', '<svg xmlns=\"http://www.w3.org/2000/svg\" ').replace('<br>', '<br></br>');\n    const svgFileText = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>${svgTextWithAttribute}`;\n\n    const element = document.createElement('a');\n    element.setAttribute('href', 'data:image/svg;base64,' + btoa(svgFileText));\n    element.setAttribute('download', 'mindmap.svg');\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  }\n\n  const onCollapse = async () => {\n    if (markMapRef.current) {\n      markMapRef.current.collapseTree();\n      await markMapRef.current.fit();\n    }\n  }\n  const onExpand = async () => {\n    if (markMapRef.current) {\n      markMapRef.current.expandTree();\n      await markMapRef.current.fit();\n    }\n  }\n\n  return <ul className=\"controls\">\n    <li><Control title=\"Zoom in\" onClick={onZoom(1.2)}>+</Control></li>\n    <li><Control title=\"Zoom out\" onClick={onZoom(0.8)}>-</Control></li>\n    <li><Control title=\"Collapse nodes\" onClick={onCollapse}>&#60;</Control></li>\n    <li><Control title=\"Expand nodes\" onClick={onExpand}>&#62;</Control></li>\n    <li><Control onClick={exportClick}>Export</Control></li>\n  </ul>\n}\n\nfunction Mindmap({ value, markMapRef, svgElementRef }: { value: string, markMapRef: React.MutableRefObject<CustomMarkmap | null>, svgElementRef: React.MutableRefObject<SVGSVGElement | null> }) {\n  useEffect(() => {\n    if (markMapRef.current) return;\n    if (!svgElementRef.current) return;\n\n    markMapRef.current = new CustomMarkmap(svgElementRef.current, {\n      duration: 0,\n      color: (\n        (colorFn) =>\n          (node: INode): string =>\n            colorFn(node.d!.toString())\n      )(d3.scaleOrdinal([\"#4c28cf\", \"#0e52ec\", \"#ea13b1\", \"#2ec9c2\", \"#0fd991\", \"#d90f32\", \"#f2c317\", \"#377eb8\", \"#4daf4a\", \"#984ea3\", \"#ff7f00\", \"#ffff33\", \"#a65628\", \"#f781bf\", \"#999999\"])),\n      nodeMinHeight: 20,\n      spacingVertical: 8,\n      spacingHorizontal: 24,\n      paddingX: 8,\n      nodeFont: `400 10px/12px -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif`\n    });\n  }, [markMapRef, svgElementRef]);\n\n  useEffect(() => {\n    const markMap = markMapRef.current;\n    if (markMap) {\n      const { root } = transformer.transform(value);\n      markMap.setData(root);\n      markMap.fit();\n    }\n\n  }, [markMapRef, value]);\n\n  return (\n    <svg className=\"mindmap\" ref={svgElementRef} />\n  );\n}\n\nfunction Sidebar({ value, onChange }: { value: string, onChange: any }) {\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n\n  const handleChange = (e: any) => {\n    onChange(e.target.value);\n  };\n\n  const handleToggle = (e: any) => {\n    if (e.target.open && textAreaRef.current) {\n      textAreaRef.current.focus();\n    }\n  };\n\n  return (\n    <details className=\"sidebar\" open onToggle={handleToggle}>\n      <textarea\n        ref={textAreaRef}\n        className=\"\"\n        value={value}\n        onChange={handleChange}\n      />\n\n      <summary><b className=\"summary-text\">&#10095;</b></summary>\n    </details>\n  )\n}\n\nfunction App() {\n  const valueFromParams = new URLSearchParams(document.location.search).get('input');\n  const decodedValueFromParams = valueFromParams && atob(valueFromParams);\n  const [value, setValue] = useState(decodedValueFromParams || initValue);\n\n\n  const markMapRef = useRef<CustomMarkmap | null>(null);\n  const svgElementRef = useRef<SVGSVGElement | null>(null);\n\n  const updateWithNewValue = (newValue: string) => {\n    const searchParams = new URLSearchParams(document.location.search);\n    searchParams.set(\"input\", btoa(newValue));\n    var newRelativePathQuery = window.location.pathname + '?' + searchParams.toString();\n    window.history.pushState(null, '', newRelativePathQuery);\n    setValue(newValue);\n  }\n\n  return (<>\n    <Sidebar value={value} onChange={updateWithNewValue} />\n    <Mindmap value={value} markMapRef={markMapRef} svgElementRef={svgElementRef} />\n    <Controls markMapRef={markMapRef} svgElementRef={svgElementRef} />\n  </>)\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}