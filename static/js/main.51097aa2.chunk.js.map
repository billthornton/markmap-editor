{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["transformer","Transformer","Mindmap","value","svgElementRef","useRef","markMapRef","useEffect","colorFn","current","Markmap","create","duration","color","d3","node","d","toString","nodeMinHeight","spacingVertical","spacingHorizontal","paddingX","nodeFont","markMap","root","transform","setData","fit","className","ref","Sidebar","onChange","textAreaRef","open","onToggle","e","target","focus","App","valueFromParams","URLSearchParams","document","location","search","get","decodedValueFromParams","atob","useState","setValue","newValue","searchParams","set","btoa","newRelativePathQuery","window","pathname","history","pushState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"wQAOMA,EAAc,IAAIC,cAcxB,SAASC,EAAT,GAAgD,IAA7BC,EAA4B,EAA5BA,MACXC,EAAgBC,iBAA6B,MAC7CC,EAAaD,iBAAuB,MA8B1C,OA5BAE,qBAAU,WAOJ,IAACC,EANDF,EAAWG,SACVL,EAAcK,UAEnBH,EAAWG,QAAUC,IAAQC,OAAOP,EAAcK,QAAS,CACzDG,SAAU,EACVC,OACGL,EAGDM,IAAgB,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,YAFzK,SAACC,GAAD,OACEP,EAAQO,EAAKC,EAAGC,cAEtBC,cAAe,GACfC,gBAAiB,EACjBC,kBAAmB,GACnBC,SAAU,EACVC,SAAS,uKAEV,IAEHf,qBAAU,WACR,IAAMgB,EAAUjB,EAAWG,QACnBe,EAASxB,EAAYyB,UAAUtB,GAA/BqB,KACD,OAAPD,QAAO,IAAPA,KAASG,QAAQF,GACV,OAAPD,QAAO,IAAPA,KAASI,QACR,CAACxB,IAKF,qBAAKyB,UAAU,UAAUC,IAAKzB,IAIlC,SAAS0B,EAAT,GAAyE,IAAtD3B,EAAqD,EAArDA,MAAO4B,EAA8C,EAA9CA,SAClBC,EAAc3B,iBAA4B,MAYhD,OACE,0BAASuB,UAAU,UAAUK,MAAI,EAACC,SAPf,SAACC,GAChBA,EAAEC,OAAOH,MAAQD,EAAYvB,SAC/BuB,EAAYvB,QAAQ4B,SAKtB,UACE,0BACER,IAAKG,EACLJ,UAAU,GACVzB,MAAOA,EACP4B,SAhBe,SAACI,GACpBJ,EAASI,EAAEC,OAAOjC,UAkBhB,kCAAS,mBAAGyB,UAAU,eAAb,yBAyBAU,MAnBf,WACE,IAAMC,EAAkB,IAAIC,gBAAgBC,SAASC,SAASC,QAAQC,IAAI,SACpEC,EAAyBN,GAAmBO,KAAKP,GAF1C,EAGaQ,mBAASF,GAjFtB,oGA8EA,mBAGN1C,EAHM,KAGC6C,EAHD,KAab,OAAQ,qCACN,cAAClB,EAAD,CAAS3B,MAAOA,EAAO4B,SATE,SAACkB,GAC1B,IAAMC,EAAe,IAAIV,gBAAgBC,SAASC,SAASC,QAC3DO,EAAaC,IAAI,QAASC,KAAKH,IAC/B,IAAII,EAAuBC,OAAOZ,SAASa,SAAW,IAAML,EAAajC,WACzEqC,OAAOE,QAAQC,UAAU,KAAM,GAAIJ,GACnCL,EAASC,MAKT,cAAC/C,EAAD,CAASC,MAAOA,QCvFLuD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5B,SAAS6B,eAAe,SAM1BZ,M","file":"static/js/main.51097aa2.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport { INode } from 'markmap-common';\nimport { Transformer } from 'markmap-lib';\nimport { Markmap } from 'markmap-view';\nimport './App.css';\n\nconst transformer = new Transformer();\nconst initValue = `# Title\n\n- one\n- two\n- third item\n  - fourth item\n    second line\n  - five\n    - six\n\n`;\n\n\nfunction Mindmap({ value }: { value: string }) {\n  const svgElementRef = useRef<SVGSVGElement | null>(null);\n  const markMapRef = useRef<Markmap | null>(null);\n\n  useEffect(() => {\n    if (markMapRef.current) return;\n    if (!svgElementRef.current) return;\n\n    markMapRef.current = Markmap.create(svgElementRef.current, {\n      duration: 0,\n      color: (\n        (colorFn) =>\n          (node: INode): string =>\n            colorFn(node.d!.toString())\n      )(d3.scaleOrdinal([\"#4c28cf\", \"#0e52ec\", \"#ea13b1\", \"#2ec9c2\", \"#0fd991\", \"#d90f32\", \"#f2c317\", \"#377eb8\", \"#4daf4a\", \"#984ea3\", \"#ff7f00\", \"#ffff33\", \"#a65628\", \"#f781bf\", \"#999999\"])),\n      nodeMinHeight: 20,\n      spacingVertical: 8,\n      spacingHorizontal: 24,\n      paddingX: 8,\n      nodeFont: `500 10px/12px -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif`\n    });\n  }, []);\n\n  useEffect(() => {\n    const markMap = markMapRef.current;\n    const { root } = transformer.transform(value);\n    markMap?.setData(root);\n    markMap?.fit();\n  }, [value]);\n\n\n\n  return (\n    <svg className=\"mindmap\" ref={svgElementRef} />\n  );\n}\n\nfunction Sidebar({ value, onChange }: { value: string, onChange: any }) {\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n\n  const handleChange = (e: any) => {\n    onChange(e.target.value);\n  };\n\n  const handleToggle = (e: any) => {\n    if (e.target.open && textAreaRef.current) {\n      textAreaRef.current.focus();\n    }\n  };\n\n  return (\n    <details className=\"sidebar\" open onToggle={handleToggle}>\n      <textarea\n        ref={textAreaRef}\n        className=\"\"\n        value={value}\n        onChange={handleChange}\n      />\n\n      <summary><b className=\"summary-text\">&#10095;</b></summary>\n    </details>\n  )\n}\n\n\nfunction App() {\n  const valueFromParams = new URLSearchParams(document.location.search).get('input');\n  const decodedValueFromParams = valueFromParams && atob(valueFromParams);\n  const [value, setValue] = useState(decodedValueFromParams || initValue);\n\n  const updateWithNewValue = (newValue: string) => {\n    const searchParams = new URLSearchParams(document.location.search);\n    searchParams.set(\"input\", btoa(newValue));\n    var newRelativePathQuery = window.location.pathname + '?' + searchParams.toString();\n    window.history.pushState(null, '', newRelativePathQuery);\n    setValue(newValue);\n  }\n\n  return (<>\n    <Sidebar value={value} onChange={updateWithNewValue} />\n    <Mindmap value={value} />\n  </>)\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}